1.测试驱动开发
2.值对象模式：
	1.保护值对象的属性，禁止被直接访问。
	2.在构造函数中就对属性进行赋值。
	3.去掉任何一个会改变属性值的方式函数（setter），否则属性值很容易被改变。 

    注：敏捷开发（Agile Development）

      最近，单体测试――特别是测绘驱动开发――已经和敏捷开发方法学紧密的联系起来了，比如说极限编程(XP)。极限编程的焦点关注于快速的反复的发步功能性的代码给客户，并把变化的客户需求做为开发过程中的必备部分。下面是一些关于学习敏捷编程的在线资源：

      函数性测试

      这本书里面的大部分测试例子都是用来测试面对对象的代码，但是所有形式的编程都可以从中得到收获的。单体测试框架，比如说PHPUnits和SimpleTest，也都能很容易的用来测试功能函数的。例如上面的SimpleTest例子，它就是用来测试calculate_sales_tax()函数的。世界各地的程序员们：把单体测试用例放到你的函数库里面吧！

 

      我希望经过上面的讨论后，你也会被带动起来――“测试引导”(Test Infected)！（这个术语，原创于Erich Gamma，详细情况请见文章http://junit.sourceforge.net/doc/testinfected/testing.htm），就象Gamma所写的那样，刚开始你可能会感到测试是很繁琐的，但是当你为你的程序搭建好一个广阔的测试集后，你将你的代码更加自信！

 

      重构

      即使最有思想性且最熟练的程序员也不能预见一个软件项目中的任何细微之处。问题总是出乎意外的出现，需求也可能在变化，结果是代码被优化，共享然后代替。

重构是一个惯用的方法：检查你所有的代码，找出其中能统一化和简单化的共同或者类似之处，使得你的代码更加容易维护和扩展。重构也包括探索一个设计模式是否能够应用到这个具体的问题上――这也能使解决方案简单化。

      重构，简单点说是重命名一个属性或者方法，复杂点说是压缩一个已有的类。改变你的代码使得它符合一个或者更多的设计模式是另外一种重构――读完这本书后，你可能会去实现的。

没有什么能比例子来更好的解释重构了！


UML

      统一建模语言（UML）是一种与具体编程语言无关的用来描述面对对象编程观念的方法。关于UML的相关信息资料你可以从http://www.uml.org上找到。

      UML涉及到很多方面，但对PHP程序员来说，其中最相关的两方面是类图和序列图。

      类图描述了一个或者更多的类以及他们在你的程序之间的相互关系。（译者注：最好能够参考相关的UML教材，将有助于你的理解。）每个类都用一个盒子标识，每个盒子都分成三部分：第一部分是类名，第二步分列举了类的属性（变量），最后一部分列举了类的方法。属性和方法的可见度被设计为：＋代表public（公开），―代表private（私有），#代表protected（受保护的）。


 资源代码文档

      如果你浏览完了这本书的所有页面，你可以会注意到一些明显的格式化的注释块类似于：


/**

* funny multi-line comments

* @something what is this?

*/


      它们被称为“docblocks”（译者注：文档块），是由程序，比如说phpDocumentor（http://phpdocu.sf.net），为你的PHP项目自动生成的应用程序接口（API）文档。

Docblocks（文档块）是特定格式的多行注释，以/**标识开始，接下来的每行都以*为第一个字符，并以*/标识注释终止。在每行的前缀前面允许有空格。

      @something 代表一个“标签”(tag)，当文档需要转化为解析格式时，标签用来阐明一些必要的信息。比如说标签@private，使用在php4中，常用来标识类的这个方法或者属性时私有的，因为在php4中时没有提供这种天然的能力的（译者注：在php4中时无法说明一个变量或者方法是否私有的）。

资源代码文档比如说docblocks即是一个有用的参考资料，也是开源项目的一个好广告。其中一个例子（我帮忙维护的）就是SimpleTestAPI文档（http://simpletest.org）。




在 TDD,

一个经验法则就是将编码最简单的实现，如果你两次需要相同的代码，可以将其改进，但不要复制代码。 然而你往往需要三次或三次以上的一样代码。 因此我们可以提取一个方法即重构实现这个工作。

注：重构 - 提取方法

当你的代码中有两个或者两个以上部分的代码相似的时候, 可以将它们提取出来成为一个独立的方法，并按它的用途命名。当你的类的方法代码中频频出现相同的成分，提取代码作为一个方法是非常有用的。

 

注：黑匣子测试（Black Box Testing）

黑匣子测试就是：把被测试的对象当成" 黑匣子 " ，我们只知道它提供的应用接口（API），但不知道其到底执行了什么。它主要测试对象公共方法的输入和输出。

白匣子测试（White Box Testing）

白匣子测试和黑匣子测试恰恰相反, 它假定知道测试对象中的所有代码信息。这种形式的测试是为了完善代码和减少错误。

关于白匣子测试的详细说明请见：http:// c 2.com/cgi/wiki?WhiteBoxTesting 。

 





